# Utiliza Terraform Extension

trigger:
- develop_agent

pool:
  name: ccvpw-ansible

variables:
- group: Terraform_SPN
- group: SSHKeys
- name: bk_resource_group
  value: 'rg-backend-tf'
- name: bk_service_connection
  value: 'SP_AzureRM_Pokroy_Testing'
- name: bk_storage_account
  value: 'terraformpokroytesting'
- name: 'Destroy'
  value: 'false'
 
stages:
  - stage: tfvalidate
    condition: eq(variables['Destroy'], 'false')
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
        displayName: Install TF

      - script: |
          # ensure ssh public key is available
          echo "$(SSH_PUBLIC_KEY)" >  ~/.ssh/id_rsa.pub
      
      
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(bk_service_connection)
          backendAzureRmResourceGroupName: $(bk_resource_group)
          backendAzureRmStorageAccountName: $(bk_storage_account)
          backendAzureRmContainerName: $(CONTAINER_NAME)
          backendAzureRmKey: $(KEY)
        displayName: Terraform Init
        
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'validate'
        displayName: TF validate
  
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
    - job: apply
      steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
        displayName: Install TF

      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(bk_service_connection)
          backendAzureRmResourceGroupName: $(bk_resource_group)
          backendAzureRmStorageAccountName: $(bk_storage_account)
          backendAzureRmContainerName: $(CONTAINER_NAME)
          backendAzureRmKey: $(KEY)
        displayName: Terraform Init
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: 'SP_AzureRM_Pokroy_Testing'
        displayName: Terraform Plan
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          environmentServiceNameAzureRM: 'SP_AzureRM_Pokroy_Testing'
        displayName: Terraform Apply
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'show'
          environmentServiceNameAzureRM: 'SP_AzureRM_Pokroy_Testing'
        displayName: Terraform show


  - stage: destroy
    displayName: 'Terraform Destroy'
    condition: and(succeeded(), eq(variables['Destroy'], 'true'))
    dependsOn: []
    jobs:
    - job: destroy
      steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
        displayName: Install TF

      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(bk_service_connection)
          backendAzureRmResourceGroupName: $(bk_resource_group)
          backendAzureRmStorageAccountName: $(bk_storage_account)
          backendAzureRmContainerName: $(CONTAINER_NAME)
          backendAzureRmKey: $(KEY)
        displayName: Terraform Init
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'destroy'
          environmentServiceNameAzureRM: 'SP_AzureRM_Pokroy_Testing'
          args: '-auto-approve'
        displayName: Terraform Destroy

      
        